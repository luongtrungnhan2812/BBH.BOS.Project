//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace BBH.BOS.Web.SentMailServices {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="SentMailServices.ISendMailSvc")]
    public interface ISendMailSvc {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISendMailSvc/SendMailCustomizeByTemplate", ReplyAction="http://tempuri.org/ISendMailSvc/SendMailCustomizeByTemplateResponse")]
        bool SendMailCustomizeByTemplate(string title, string subject, string content, string emailRecieve);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISendMailSvc/SendMailCustomizeByTemplate", ReplyAction="http://tempuri.org/ISendMailSvc/SendMailCustomizeByTemplateResponse")]
        System.Threading.Tasks.Task<bool> SendMailCustomizeByTemplateAsync(string title, string subject, string content, string emailRecieve);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISendMailSvc/SendMailByVerifyMember", ReplyAction="http://tempuri.org/ISendMailSvc/SendMailByVerifyMemberResponse")]
        bool SendMailByVerifyMember(string emailVerify);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISendMailSvc/SendMailByVerifyMember", ReplyAction="http://tempuri.org/ISendMailSvc/SendMailByVerifyMemberResponse")]
        System.Threading.Tasks.Task<bool> SendMailByVerifyMemberAsync(string emailVerify);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISendMailSvc/SendMailResetPassword", ReplyAction="http://tempuri.org/ISendMailSvc/SendMailResetPasswordResponse")]
        bool SendMailResetPassword(string emailRecieve, string newPassword);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISendMailSvc/SendMailResetPassword", ReplyAction="http://tempuri.org/ISendMailSvc/SendMailResetPasswordResponse")]
        System.Threading.Tasks.Task<bool> SendMailResetPasswordAsync(string emailRecieve, string newPassword);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISendMailSvc/SendMailByVerifyBitAddress", ReplyAction="http://tempuri.org/ISendMailSvc/SendMailByVerifyBitAddressResponse")]
        bool SendMailByVerifyBitAddress(string emailVerify, string bitcoinAddress);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISendMailSvc/SendMailByVerifyBitAddress", ReplyAction="http://tempuri.org/ISendMailSvc/SendMailByVerifyBitAddressResponse")]
        System.Threading.Tasks.Task<bool> SendMailByVerifyBitAddressAsync(string emailVerify, string bitcoinAddress);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISendMailSvc/SendMailOrderSuccessInfocash", ReplyAction="http://tempuri.org/ISendMailSvc/SendMailOrderSuccessInfocashResponse")]
        bool SendMailOrderSuccessInfocash(string emailVerify, string bitcoinAddress, string eventCoin, string bitcoinDeposit, string createDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISendMailSvc/SendMailOrderSuccessInfocash", ReplyAction="http://tempuri.org/ISendMailSvc/SendMailOrderSuccessInfocashResponse")]
        System.Threading.Tasks.Task<bool> SendMailOrderSuccessInfocashAsync(string emailVerify, string bitcoinAddress, string eventCoin, string bitcoinDeposit, string createDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISendMailSvc/SendMailByVerifyOrderInfocash", ReplyAction="http://tempuri.org/ISendMailSvc/SendMailByVerifyOrderInfocashResponse")]
        bool SendMailByVerifyOrderInfocash(string emailVerify, string bitcoinAddress, string timeOut, string walletIndex);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISendMailSvc/SendMailByVerifyOrderInfocash", ReplyAction="http://tempuri.org/ISendMailSvc/SendMailByVerifyOrderInfocashResponse")]
        System.Threading.Tasks.Task<bool> SendMailByVerifyOrderInfocashAsync(string emailVerify, string bitcoinAddress, string timeOut, string walletIndex);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ISendMailSvcChannel : BBH.BOS.Web.SentMailServices.ISendMailSvc, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SendMailSvcClient : System.ServiceModel.ClientBase<BBH.BOS.Web.SentMailServices.ISendMailSvc>, BBH.BOS.Web.SentMailServices.ISendMailSvc {
        
        public SendMailSvcClient() {
        }
        
        public SendMailSvcClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public SendMailSvcClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public SendMailSvcClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public SendMailSvcClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public bool SendMailCustomizeByTemplate(string title, string subject, string content, string emailRecieve) {
            return base.Channel.SendMailCustomizeByTemplate(title, subject, content, emailRecieve);
        }
        
        public System.Threading.Tasks.Task<bool> SendMailCustomizeByTemplateAsync(string title, string subject, string content, string emailRecieve) {
            return base.Channel.SendMailCustomizeByTemplateAsync(title, subject, content, emailRecieve);
        }
        
        public bool SendMailByVerifyMember(string emailVerify) {
            return base.Channel.SendMailByVerifyMember(emailVerify);
        }
        
        public System.Threading.Tasks.Task<bool> SendMailByVerifyMemberAsync(string emailVerify) {
            return base.Channel.SendMailByVerifyMemberAsync(emailVerify);
        }
        
        public bool SendMailResetPassword(string emailRecieve, string newPassword) {
            return base.Channel.SendMailResetPassword(emailRecieve, newPassword);
        }
        
        public System.Threading.Tasks.Task<bool> SendMailResetPasswordAsync(string emailRecieve, string newPassword) {
            return base.Channel.SendMailResetPasswordAsync(emailRecieve, newPassword);
        }
        
        public bool SendMailByVerifyBitAddress(string emailVerify, string bitcoinAddress) {
            return base.Channel.SendMailByVerifyBitAddress(emailVerify, bitcoinAddress);
        }
        
        public System.Threading.Tasks.Task<bool> SendMailByVerifyBitAddressAsync(string emailVerify, string bitcoinAddress) {
            return base.Channel.SendMailByVerifyBitAddressAsync(emailVerify, bitcoinAddress);
        }
        
        public bool SendMailOrderSuccessInfocash(string emailVerify, string bitcoinAddress, string eventCoin, string bitcoinDeposit, string createDate) {
            return base.Channel.SendMailOrderSuccessInfocash(emailVerify, bitcoinAddress, eventCoin, bitcoinDeposit, createDate);
        }
        
        public System.Threading.Tasks.Task<bool> SendMailOrderSuccessInfocashAsync(string emailVerify, string bitcoinAddress, string eventCoin, string bitcoinDeposit, string createDate) {
            return base.Channel.SendMailOrderSuccessInfocashAsync(emailVerify, bitcoinAddress, eventCoin, bitcoinDeposit, createDate);
        }
        
        public bool SendMailByVerifyOrderInfocash(string emailVerify, string bitcoinAddress, string timeOut, string walletIndex) {
            return base.Channel.SendMailByVerifyOrderInfocash(emailVerify, bitcoinAddress, timeOut, walletIndex);
        }
        
        public System.Threading.Tasks.Task<bool> SendMailByVerifyOrderInfocashAsync(string emailVerify, string bitcoinAddress, string timeOut, string walletIndex) {
            return base.Channel.SendMailByVerifyOrderInfocashAsync(emailVerify, bitcoinAddress, timeOut, walletIndex);
        }
    }
}
